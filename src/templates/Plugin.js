import React, { useState } from 'react';
import usePageLeave from 'react-use/lib/usePageLeave';
import isEmpty from 'lodash/isEmpty';
import { GatsbyImage } from 'gatsby-plugin-image';
import { graphql } from 'gatsby';
import {
  SEO,
  SitewideHeader,
  SitewideFooter,
  ExitIntentModal,
  Title,
  TextLink as Link,
} from 'components';
import { Header, PluginCTA, Sidebar } from 'components/backstage/plugins';
import fullRoadieDocsPath from 'components/backstage/plugins/fullRoadieDocsPath';

const PAGE_SECTIONS = {
  INTRODUCTION: {
    key: 'introduction',
    existsKey: 'introduction',
    fragment: 'introduction',
    label: 'Introduction',
  },
  INSTALLATION_INSTRUCTIONS: {
    key: 'installationInstructions',
    existsKey: 'installationInstructions',
    fragment: 'installation-instructions',
    label: 'Installation Instructions',
  },
  NOTES: {
    key: 'notes',
    existsKey: 'notes',
    fragment: 'notes',
    label: 'Things to Know',
  },
  CHANGELOG: {
    key: 'changelog',
    existsKey: 'changelogSince',
    fragment: 'changelog',
    label: 'Changelog',
  },
};

const RoadieDocsLink = ({ availableOnRoadie, roadieDocsPath }) => {
  const disclaimer = 'These instructions apply to self-hosted Backstage only.';

  if (availableOnRoadie && roadieDocsPath) {
    return (
      <p className="prose prose-primary max-w-none">
        {disclaimer} To use this plugin on Roadie,{' '}
        <Link color="primary" to={fullRoadieDocsPath(roadieDocsPath)}>
          visit the docs
        </Link>
        .
      </p>
    );
  }

  return <p className="prose prose-primary max-w-none">{disclaimer}</p>;
};


const Changelog = ({ plugin }) => {
  const { changelogSince, changelog, humanName, codeLocation } = plugin;
  if (isEmpty(plugin[PAGE_SECTIONS.CHANGELOG.existsKey])) return null;

  let inner = (
    <div className="prose prose-primary max-w-none mb-4">
      <p>
        The {humanName} plugin has not seen any significant changes since {changelogSince}.
      </p>
    </div>
  );

  if (!isEmpty(changelog)) {
    inner = (
      <>
        <div className="prose prose-primary max-w-none mb-4">
          <p>
            This changelog is produced from commits made to the {humanName} plugin since{' '}
            {changelogSince}, and based on the code located{' '}
            <Link to={codeLocation} color="primary">
              here
            </Link>
            . It may not contain information about all commits. Releases and version bumps are
            intentionally omitted. This changelog is generated by AI.
          </p>
        </div>

        <div
          className="prose prose-primary max-w-none"
          dangerouslySetInnerHTML={{ __html: changelog.childMarkdownRemark.html }}
        />
      </>
    );
  }

  return (
    <div className="mb-24">
      <div className="mb-4" id={PAGE_SECTIONS.CHANGELOG.fragment}>
        <Title className="text-3xl">{PAGE_SECTIONS.CHANGELOG.label}</Title>
      </div>

      {inner}
    </div>
  );
};

const Body = ({ plugin, }) => {
  const {
    installationInstructions,
    introduction,
    availableOnRoadie,
    roadieDocsPath,
    coverImage,
    notes,
  } = plugin;
  const introHtml = introduction?.childMarkdownRemark?.html;
  const installHtml = installationInstructions?.childMarkdownRemark?.html;
  const notesHtml = notes?.childMarkdownRemark?.html;

  return (
    <>
      {!isEmpty(introHtml) && (
        <div className="mb-24" id={PAGE_SECTIONS.INTRODUCTION.fragment}>
          <div
            className="mb-4 mt-0 prose prose-primary max-w-none"
            dangerouslySetInnerHTML={{ __html: introduction.childMarkdownRemark.html }}
          />
        </div>
      )}

      {coverImage && (
        <div className="mb-24">
          <GatsbyImage
            image={coverImage.gatsbyImageData}
            alt={coverImage.description}
            className="max-w-full max-h-full shadow-small"
          />
        </div>
      )}

      {!isEmpty(installHtml) && (
        <div className="mb-24">
          <div className="mb-4" id={PAGE_SECTIONS.INSTALLATION_INSTRUCTIONS.fragment}>
            <Title className="text-3xl">{PAGE_SECTIONS.INSTALLATION_INSTRUCTIONS.label}</Title>
          </div>

          <div className="mb-4">
            <RoadieDocsLink availableOnRoadie={availableOnRoadie} roadieDocsPath={roadieDocsPath} />
          </div>

          <div
            className="mt-0 prose prose-primary max-w-none"
            dangerouslySetInnerHTML={{
              __html: installationInstructions.childMarkdownRemark.html,
            }}
          />
        </div>
      )}

      {!isEmpty(notesHtml) && (
        <div className="mb-24">
          <div className="mb-4" id={PAGE_SECTIONS.NOTES.fragment}>
            <Title className="text-3xl">{PAGE_SECTIONS.NOTES.label}</Title>
          </div>

          <div
            className="prose prose-primary max-w-none"
            dangerouslySetInnerHTML={{ __html: notes.childMarkdownRemark.html }}
          />
        </div>
      )}

      <Changelog plugin={plugin} />
    </>
  );
};

const hasExitIntentModalBeenShownBefore = () => {
  return localStorage.getItem('exitIntentModalHasBeenShown') || false;
};

const recordExitIntentModalHasBeenShown = () => {
  return localStorage.setItem('exitIntentModalHasBeenShown', true);
};

const PluginTemplate = ({ data }) => {
  const { plugin } = data;
  const [exitIntentModalOpen, setExitIntentModalOpen] = useState(false);

  const handleOpenExitIntentModal = () => {
    if (!hasExitIntentModalBeenShownBefore()) {
      setExitIntentModalOpen(true);
      recordExitIntentModalHasBeenShown();
    }
  };

  const handleCloseExitIntentModal = () => {
    setExitIntentModalOpen(false);
  };

  usePageLeave(() => {
    handleOpenExitIntentModal();
  });

  return (
    <>
      <SEO title={plugin.seoTitle} description={plugin.seoDescription} />

      <ExitIntentModal
        modalOpen={exitIntentModalOpen}
        handleCloseModal={handleCloseExitIntentModal}
      />

      <SitewideHeader />

      <div className="mt-4">
        <Header plugin={plugin} />
      </div>

      <main className="pb-8 px-4 lg:pb-28">
        <div className="relative max-w-7xl mx-auto">
          <div className="grid grid-cols-3 md:gap-12 lg:gap-20">
            <article className="col-span-3 md:col-span-2">
              <Body plugin={plugin} />
              <PluginCTA plugin={plugin} />
            </article>

            <aside className="hidden md:block md:col-span-1">
              <Sidebar plugin={plugin} pageSections={PAGE_SECTIONS} />
            </aside>
          </div>
        </div>
      </main>

      <SitewideFooter />
    </>
  );
};

export default PluginTemplate;

export const pageQuery = graphql`
  query PluginBySlug($slug: String!) {
    site {
      siteMetadata {
        social {
          twitter
          linkedin
        }
      }
    }

    plugin: contentfulBackstagePlugin(slug: { eq: $slug }) {
      humanName
      slug
      npmPackageName
      roadieDocsPath
      seoDescription
      seoTitle
      heading
      codeLocation
      attributionText
      attributionUrl
      availableOnRoadie
      lead

      notes {
        childMarkdownRemark {
          html
        }
      }

      introduction {
        childMarkdownRemark {
          html
        }
      }

      installationInstructions {
        childMarkdownRemark {
          html
        }
      }

      changelog {
        childMarkdownRemark {
          html
        }
      }
      changelogSince(fromNow: true)

      coverImage {
        description
        gatsbyImageData(layout: FULL_WIDTH)
      }

      logoImage {
        gatsbyImageData(layout: FIXED, width: 80, placeholder: DOMINANT_COLOR)
      }
    }
  }
`;
