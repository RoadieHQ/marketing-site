# The server must be restarted to pick up changes in ths file.

# Required. Must be unique across all files in the directory. No whitespace. Use hyphens as
# separators.
name: lighthouse
humanName: Lighthouse
heading: 'Backstage Lighthouse Plugin'
# Keep it short
lead: 'Integrates Lighthouse inside Backstage.'

seo:
  # Don't forget to end with "| Roadie"
  title: 'Backstage Lighthouse Plugin | Roadie'
  description: |
    Google's Lighthouse tool is a great resource for benchmarking and improving the accessibility, performance, SEO, and best practices of your website.

logo:
  # This must be a relative path. It should start without a slash or with ./
  # The overall size of the file should be approximately 200 by 200.
  # The image in the file should be approximately 100 by 100 pixels. It needs space around it.
  # The image will be made greyscale by Gatsby Image Sharp.
  fileSystemPath: './content/assets/logos/lighthouse/logo-lh.png'
  # The dimensions are required. They are the outer dimensions of the image file.
  width: 200
  height: 200

coverImage:
  fileSystemPath: './content/assets/lighthouse-plugin.png'
  alt: 'A screenshot of the Lighthouse plugin.'

# Instructions for someone who wants to use this plugin.
# languages used here must be listed in the .babelrc
gettingStarted:
  # What will this step accomplish?
  - intro: Before you start please make sure that you setup lighthouse-audit-service first.
  - intro: Install the plugin into Backstage.
    language: bash
    code: 'yarn add @backstage/plugin-lighthouse'
  - intro: Add plugin to the list of plugins.
    language: typescript
    code: |
      // packages/app/src/plugins.ts
      export { plugin as LighthousePlugin } from '@backstage/plugin-lighthouse';
  - intro: 'Add the plugin API to your API builder'
    language: typescript
    code: |
      // packages/app/src/apis.ts
      import {
        lighthouseApiRef,
        LighthouseRestApi,
      } from '@backstage/plugin-lighthouse';

      export const apis = (config: ConfigApi) => {
        builder.add(lighthouseApiRef, LighthouseRestApi.fromConfig(config));
      };
  - intro: Configure lighthouse service url
    language: YAML 
    code: |
      lighthouse:
        baseUrl: [your-website-url]
  - intro: Add annotation to your component-info.yaml file.
    language: YAML
    code: | 
        metadata:
          annotations:
            lighthouse.com/website-url: [your-website-url]
  - intro: Add plugin API to your Backstage instance.
    language: typescript
    code: |
      // packages/app/src/components/catalog/EntityPage.tsx
      import { EmbeddedRouter as LighthouseRouter } from '@backstage/plugin-lighthouse';

      const WebsiteEntityPage = ({ entity }: { entity: Entity }) => (
        ...
        &lt;EntityPageLayout>
          &lt;EntityPageLayout.Content
            path="/lighthouse"
            title="Lighthouse"
            element={&lt;LighthouseRouter  entity={entity} />}
          />
          &lt;/EntityPageLayout>
        &lt;/EntityPageLayout>
      )
  - intro: Optionally you might add Lighthouse widget to the overview tab on the EntityPage
    language: typescript
    code: |
      // packages/app/src/components/catalog/EntityPage.tsx
      import {
        LastLighthouseAuditCard,
        isPluginApplicableToEntity as isLighthouseAvailable,
      } from '@backstage/plugin-lighthouse';

      const OverviewContent = ({ entity }: { entity: Entity }) => (
        &lt;Grid container spacing={3} alignItems="stretch">
          ...
          {isLighthouseAvailable(entity) && (
            &lt;Grid item sm={4}>
              &lt;LastLighthouseAuditCard />
            &lt;/Grid>
          )}
        &lt;/Grid>
      );


# Optional. Use this to suit the brand of the tool that the plugin integrates with.
style:
  # These colors will fall back to a default if omitted.
  primaryColor: 'rgb(247, 148, 29)'
  contrastingColor: '#fff'
