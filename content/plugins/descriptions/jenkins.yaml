# The server must be restarted to pick up changes in ths file.

# Required. Must be unique across all files in the directory. No whitespace. Use hyphens as
# separators.
name: jenkins
humanName: Jenkins
heading: 'Backstage Jenkins Plugin'
# Keep it short
lead: 'Build, test, and deploy on Jenkins CI/CD platform.'

seo:
  # Don't forget to end with "| Roadie"
  title: 'Backstage Jenkins Plugin | Roadie'
  description: |
    Build, test, and deploy on Jenkins CI/CD platform.

logo:
  # This must be a relative path. It should start without a slash or with ./
  # The overall size of the file should be approximately 200 by 200.
  # The image in the file should be approximately 100 by 100 pixels. It needs space around it.
  # The image will be made greyscale by Gatsby Image Sharp.
  fileSystemPath: './content/assets/logos/jenkins/logo-jenkins.png'
  # The dimensions are required. They are the outer dimensions of the image file.
  width: 200
  height: 200

coverImage:
  fileSystemPath: './content/assets/jenkins-plugin.png'
  alt: 'A screenshot of the Jenkins plugin.'

# Instructions for someone who wants to use this plugin.
# languages used here must be listed in the .babelrc
gettingStarted:
  # What will this step accomplish?
  - intro: Install the plugin into Backstage.
    language: bash
    code: 'yarn add @backstage/plugin-jenkins'
    
  - intro: Add plugin to the list of plugins.
    language: typescript
    code: |
      // packages/app/src/plugins.ts
      export { plugin as Jenkins } from '@backstage/plugin-jenkins';

  - intro: Add plugin API to your Backstage instance.
    language: typescript
    code: | 
      // packages/app/src/components/catalog/EntityPage.tsx
      import { 
        Router as JenkinsRouter,
        isPluginApplicableToEntity as isJenkinsAvailable,
        LatestRunCard as JenkinsLatestRunCard,
      } from '@backstage/plugin-cloudbuild';

      const CICDSwitcher = ({ entity }: { entity: Entity }) => {
        switch (true) {
          ...
          case isJenkinsAvailable(entity):
            return <JenkinsRouter entity={entity} />;
          ...
        }
      }

  - intro: Add proxy configuration
    language: YAML
    code: |  
      proxy:
        '/jenkins/api':
          target: 'http://localhost:8080' # your Jenkins URL
          changeOrigin: true
          headers:
            Authorization:
              $env: JENKINS_BASIC_AUTH_HEADER

  - intro: Add annotation to your component-info.yaml file.
    language: YAML
    code: | 
        metadata:
          annotations:
            jenkins.io/github-folder: [folder-name/job-name]


# Optional. Use this to suit the brand of the tool that the plugin integrates with.
style:
  # These colors will fall back to a default if omitted.
  primaryColor: 'rgb(0, 70, 67)'
  contrastingColor: '#fff'
