# The server must be restarted to pick up changes in ths file.

# Required. Must be unique across all files in the directory. No whitespace. Use hyphens as
# separators.
name: kubernetes
humanName: Kubernetes
heading: 'Backstage Kubernetes Plugin'
# Keep it short
lead: | 
  Visualize your services no matter how or where those services are deployed.
attribution:
  text: Spotify
  href: https://spotify.com

seo:
  # Don't forget to end with "| Roadie"
  title: 'Backstage Kubernetes Plugin | Roadie'
  description: |
    Visualize your services no matter how or where those services are deployed.

logo:
  # This must be a relative path. It should start without a slash or with ./
  # The overall size of the file should be approximately 200 by 200.
  # The image in the file should be approximately 100 by 100 pixels. It needs space around it.
  # The image will be made greyscale by Gatsby Image Sharp.
  fileSystemPath: './content/assets/logos/kubernetes/logo-kubernetes.png'
  # The dimensions are required. They are the outer dimensions of the image file.
  width: 192
  height: 192

coverImage:
  fileSystemPath: './content/assets/kubernetes-plugin.png'
  alt: 'A screenshot of the Kubernetes plugin.'

# Instructions for someone who wants to use this plugin.
# languages used here must be listed in the .babelrc
gettingStarted:
  # What will this step accomplish?
  - intro: The Kubernetes plugin is made up of @backstage/plugin-kubernetes and @backstage/plugin-kubernetes-backend. To make it work, you will need to install and configure them.
  - title: Frontend plugin
  - intro: Install the Kubernetes frontend plugin into Backstage.
    language: bash
    code: |
      cd packages/app
      yarn add @backstage/plugin-kubernetes
  - intro: Add Kubernetes frontend plugin to the list of plugins.
    language: typescript
    code: |
      // packages/app/src/plugins.ts
      export { plugin as Kubernetes } from '@backstage/plugin-kubernetes';
  - intro: Add plugin API to your Backstage instance.
    language: typescript
    code: |
      // packages/app/src/components/catalog/EntityPage.tsx
      import { Router as KubernetesRouter } from '@backstage/plugin-kubernetes';

      const ServiceEntityPage = ({ entity }: { entity: Entity }) => (
        &lt;EntityPageLayout>
          // ...
          &lt;EntityPageLayout.Content
            path="/kubernetes/*"
            title="Kubernetes"
            element={<KubernetesRouter entity={entity} />}
          />
        &lt;/EntityPageLayout>
      );
  - title: Backend plugin
  - intro: Install the Kubernetes Backend plugin into Backstage.
    language: bash
    code: |
      cd packages/backend
      yarn add @backstage/plugin-kubernetes-backend
  - intro: Create a new file with the following content.
    language: typescript
    code: |
      // packages/backend/src/plugins/kubernetes.ts
      import { createRouter } from '@backstage/plugin-kubernetes-backend';
      import { PluginEnvironment } from '../types';

      export default async function createPlugin({
        logger,
        config,
      }: PluginEnvironment) {
        return await createRouter({ logger, config });
      }
  - intro: Register the plugin.
    language: typescript
    code: |
      // packages/backend/src/index.ts
      import kubernetes from './plugins/kubernetes';

      const kubernetesEnv = useHotMemoize(module, () => createEnv('kubernetes'));

      apiRouter.use('/kubernetes', await kubernetes(kubernetesEnv));

# Optional. Use this to suit the brand of the tool that the plugin integrates with.
style:
  # These colors will fall back to a default if omitted.
  primaryColor: 'rgb(0, 70, 67)'
  contrastingColor: '#fff'
